import telebot
from telebot import types
import sqlite3
import os
from datetime import datetime

bot = telebot.TeleBot('8008772489:AAF6pSVLc1b16WDx7awirW4SGKP8HhZ4pIM')

admin_chat_id = 1013095495

def get_products():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name, description, price, image FROM products")
            products = cursor.fetchall()
        return products
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def register_user(user_id, username, first_name, last_name):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) "
                "VALUES (?, ?, ?, ?)",
                (user_id, username, first_name, last_name)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def add_to_cart(user_id, product_name, quantity=1):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO cart (user_id, product_name, quantity) VALUES (?, ?, ?)",
                (user_id, product_name, quantity)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")

def get_cart(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT product_name, quantity FROM cart WHERE user_id = ?", (user_id,))
            cart_items = cursor.fetchall()
        return cart_items
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return []

def clear_cart(user_id):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

def calculate_total(cart_items):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    total = 0
    products = get_products()
    for item in cart_items:
        product_name, quantity = item
        for product in products:
            if product[0] == product_name:
                price = int(product[2].replace('‚ÇΩ', '').replace('$', '').replace(',', '').strip())
                total += price * quantity
    return total

def add_feedback(user_id, feedback_text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO feedback (user_id, feedback_text) VALUES (?, ?)",
                (user_id, feedback_text)
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

def get_feedbacks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT users.username, feedback.feedback_text, feedback.feedback_date FROM feedback JOIN users ON feedback.user_id = users.user_id")
            feedbacks = cursor.fetchall()
        return feedbacks
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return []

@bot.message_handler(commands=["start"])
def welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üëï–¢–æ–≤–∞—Ä—ã')
    button2 = types.KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    button3 = types.KeyboardButton('üî¥–ü–æ–º–æ—â—å')
    button4 = types.KeyboardButton('üõí–ö–æ—Ä–∑–∏–Ω–∞')
    button5 = types.KeyboardButton('üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    markup.row(button1)
    markup.row(button2, button3)
    markup.row(button4, button5)

    if message.text == "/start":
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç!, {message.from_user.first_name}!\n"
            f"–£ –º–µ–Ω—è –Ω–∞—Å –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É!\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: @relight_b, @suppnexy",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=markup
        )

@bot.message_handler(content_types='photo')
def handle_payment_screenshot(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞."""
    order_info = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: {message.from_user.id}).\n"
        f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω."
    )
    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data=f"confirm_{message.from_user.id}"
    )
    reject_button = types.InlineKeyboardButton(
        "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data=f"reject_{message.from_user.id}"
    )
    markup.add(confirm_button, reject_button)

    bot.send_photo(
        admin_chat_id,
        message.photo[-1].file_id,
        caption=order_info,
        reply_markup=markup
    )

    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–∫–∞–∑."
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_admin_action(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    action, user_id = call.data.split("_")
    user_id = int(user_id)

    if action == "confirm":
        bot.send_message(
            user_id,
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è."
        )
        clear_cart(user_id)  # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        bot.send_message(
            admin_chat_id,
            f"–û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        )
    elif action == "reject":
        bot.send_message(
            user_id,
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        bot.send_message(
            admin_chat_id,
            f"–û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.edit_message_reply_markup(
        admin_chat_id,
        call.message.message_id,
        reply_markup=None
    )

@bot.message_handler()
def info(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if message.text == "üëï–¢–æ–≤–∞—Ä—ã":
        goods_chapter(message)
    elif message.text.startswith("–ö—É–ø–∏—Ç—å: "):
        bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏ –µ–º—É –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏: @relight_b"
        )
    elif message.text.startswith("–¢–æ–≤–∞—Ä"):
        show_product_info(message)
    elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        setting_chapter(message)
    elif message.text == "üî¥–ü–æ–º–æ—â—å":
        info_chapter(message)
    elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É":
        bot.send_message(
            message.chat.id,
            "@relight_b"
        )
    elif message.text == "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è" or message.text == "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        welcome(message)
    elif message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        show_cart(message)
    elif message.text == "üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        show_profile(message)
    elif message.text.startswith("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É: "):
        add_product_to_cart(message)
    elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        clear_user_cart(message)
    elif message.text == "–û–ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        manual_payment(message)
    elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        leave_feedback(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã":
        show_feedbacks(message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
    else:
        bot.send_message(
            message.chat.id,
            "–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏"
        )

def goods_chapter(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    products = get_products()

    for product in products:
        product_button = types.KeyboardButton(f"–¢–æ–≤–∞—Ä: {product[0]}")
        markup.add(product_button)

    back_button = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
    markup.add(back_button)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=markup
    )

def show_product_info(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ."""
    product_name = message.text.replace("–¢–æ–≤–∞—Ä: ", "")
    products = get_products()

    for product in products:
        if product[0] == product_name:
            description = product[1]
            price = product[2]
            image_path = product[3]

            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo)
            else:
                bot.send_message(
                    message.chat.id,
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )

            bot.send_message(
                message.chat.id,
                f"{product_name}\n{description}\n–¶–µ–Ω–∞: {price}"
            )

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buy_button = types.KeyboardButton(f"–ö—É–ø–∏—Ç—å: {product_name}")
            add_to_cart_button = types.KeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É: {product_name}")
            back_button = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
            markup.add(buy_button, add_to_cart_button, back_button)

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )
            return

    bot.send_message(
        message.chat.id,
        "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
    )

def setting_chapter(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É')
    button2 = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
    button3 = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã')
    button4 = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
    markup.row(button1)
    markup.row(button2, button3)
    markup.row(button4)

    bot.send_message(
        message.chat.id,
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
        reply_markup=markup
    )

def info_chapter(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É')
    button2 = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
    markup.row(button1, button2)

    bot.send_message(
        message.chat.id,
        "–†–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏.\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
        reply_markup=markup
    )

def show_cart(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    cart_items = get_cart(user_id)

    if cart_items:
        cart_message = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        for item in cart_items:
            cart_message += f"{item[0]} - {item[1]} —à—Ç.\n"
        total = calculate_total(cart_items)
        cart_message += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
        bot.send_message(
            message.chat.id,
            cart_message
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        pay_button = types.KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é')
        clear_button = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
        back_button = types.KeyboardButton('üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        markup.row(pay_button, clear_button)
        markup.row(back_button)

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        )

def show_profile(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    register_user(user_id, username, first_name, last_name)

    profile_message = (
        f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n"
        f"–ò–º—è: {first_name} {last_name}\n"
        f"Username: @{username}\n"
    )
    bot.send_message(
        message.chat.id,
        profile_message
    )

def add_product_to_cart(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    product_name = message.text.replace("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É: ", "")

    add_to_cart(user_id, product_name)
    bot.send_message(
        message.chat.id,
        f"–¢–æ–≤–∞—Ä {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É."
    )

def clear_user_cart(message):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    clear_cart(user_id)
    bot.send_message(
        message.chat.id,
        "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞."
    )

def manual_payment(message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é."""
    user_id = message.from_user.id
    cart_items = get_cart(user_id)
    total = calculate_total(cart_items)

    if total == 0:
        bot.send_message(
            message.chat.id,
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        )
        return

    payment_instructions = (
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É {total}‚ÇΩ:\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–º–µ—Ä +79991234567 (–°–±–µ—Ä–±–∞–Ω–∫).\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
        "3. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à –∑–∞–∫–∞–∑."
    )

    bot.send_message(
        message.chat.id,
        payment_instructions
    )

@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def leave_feedback(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:"
    )
    bot.register_next_step_handler(message, process_feedback)

def process_feedback(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    feedback_text = message.text
    add_feedback(user_id, feedback_text)
    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
    )

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
def show_feedbacks(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã."""
    feedbacks = get_feedbacks()
    if feedbacks:
        feedback_message = "–û—Ç–∑—ã–≤—ã:\n"
        for feedback in feedbacks:
            feedback_message += f"@{feedback[0]}: {feedback[1]} (–î–∞—Ç–∞: {feedback[2]})\n"
        bot.send_message(
            message.chat.id,
            feedback_message
        )
    else:
        bot.send_message(
            message.chat.id,
            "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        )

if __name__ == "__main__":
    bot.polling(none_stop=True)